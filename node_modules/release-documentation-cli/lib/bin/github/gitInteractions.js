'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.taggedRelease = exports.updateRelease = exports.newRelease = exports.latestRelease = undefined;

var _gitTags = require('git-tags');

var _gitTags2 = _interopRequireDefault(_gitTags);

var _openInEditor = require('open-in-editor');

var _openInEditor2 = _interopRequireDefault(_openInEditor);

var _contentConstruction = require('../utils/contentConstruction');

var _contentConstruction2 = _interopRequireDefault(_contentConstruction);

var _GithubApi = require('./api/GithubApi');

var _GithubApi2 = _interopRequireDefault(_GithubApi);

var _File = require('../utils/File');

var _File2 = _interopRequireDefault(_File);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const latestRelease = async (userDetails, repoDetails) => {
  const api = new _GithubApi2.default(userDetails);
  return await api.latestRelease(repoDetails);
};

const newRelease = async (userDetails, repoDetails, { approved, scheduled, testEvidence, additionalReleaseNotes }) => {
  const api = new _GithubApi2.default(userDetails);
  const changeLogContents = new _File2.default('./CHANGELOG.md').asString;
  let releaseBody;

  const versionNumber = await new Promise(resolve => _gitTags2.default.get((err, tags) => resolve(tags ? tags[0] : undefined)));

  if (!changeLogContents) console.error('❌ No changelog has been found! ❌');

  if (!versionNumber) console.error('❌ No version number found, please update your commit with a git tag ❌');

  if (changeLogContents && versionNumber) {
    releaseBody = (0, _contentConstruction2.default)(scheduled, approved, testEvidence, changeLogContents, additionalReleaseNotes);
  } else {
    throw new Error('❌ missing version number or changelog, please check you have tagged your content correctly ❌');
  }

  const releaseDetails = {
    tag_name: versionNumber,
    target_commitish: 'master',
    name: versionNumber,
    body: releaseBody,
    draft: false,
    prerelease: !approved
  };

  return await api.newRelease(repoDetails, releaseDetails);
};

const taggedRelease = async (userDetails, repoDetails, version) => {
  const api = new _GithubApi2.default(userDetails);
  const taggedRelease = await api.taggedRelease(repoDetails, version);

  if (!taggedRelease) throw new Error('❌ No release found from that tag ❌');

  const tempReleaseFile = new _File2.default('./tmp/taggedRelease.json');
  tempReleaseFile.write(JSON.stringify(taggedRelease.body));

  const editor = _openInEditor2.default.configure({
    editor: process.env.EDITOR || 'vim'
  });
  editor.open(tempReleaseFile.filePath);
};

const updateRelease = async (userDetails, repoDetails, version, released) => {
  const api = new _GithubApi2.default(userDetails);
  const taggedRelease = await api.taggedRelease(repoDetails, version);
  const taggedReleaseContent = new _File2.default('./tmp/taggedRelease.json').asJson;

  if (!taggedRelease) throw new Error('❌ No release found from that tag ❌');

  const releaseDetails = { body: taggedReleaseContent, prerelease: !released };

  return await api.updateRelease(repoDetails, taggedRelease.id, releaseDetails);
};

exports.latestRelease = latestRelease;
exports.newRelease = newRelease;
exports.updateRelease = updateRelease;
exports.taggedRelease = taggedRelease;