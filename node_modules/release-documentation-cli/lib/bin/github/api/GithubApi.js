'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class GithubApi {
  constructor(userDetails) {
    this._userDetails = userDetails;
  }

  get userDetails() {
    return this._userDetails;
  }

  latestRelease(repoDetails) {
    const path = `repos/${repoDetails}/releases/latest`;
    return githubRequest('get', path, null, this.userDetails);
  }

  taggedRelease(repoDetails, tag) {
    const path = `repos/${repoDetails}/releases/tags/${tag}`;
    return githubRequest('get', path, null, this.userDetails);
  }

  updateRelease(repoDetails, releaseId, releaseDetails) {
    const path = `repos/${repoDetails}/releases/${releaseId}`;
    return githubRequest('patch', path, releaseDetails, this.userDetails);
  }

  newRelease(repoDetails, releaseDetails) {
    const path = `repos/${repoDetails}/releases`;
    return githubRequest('post', path, releaseDetails, this.userDetails);
  }
}

exports.default = GithubApi;
const githubRequest = async (httpMethod, path, releaseDetails, userDetails) => {
  const authDetails = `Basic ${Buffer.from(`${userDetails.username}:${userDetails.accessToken}`).toString('base64')}`;

  try {
    const response = await (0, _axios2.default)({
      method: httpMethod,
      url: `https://api.github.com/${path}`,
      data: releaseDetails,
      headers: { Authorization: authDetails }
    });

    return response.data;
  } catch (error) {
    if (error.response.status === 422) throw new Error('422 - Failed to create a new release. Please tag your release first.');
    throw new Error(error);
  }
};