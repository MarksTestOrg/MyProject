'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findBitriseBuildTestEvidence = undefined;

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _getCommitHashOfTag = require('./getCommitHashOfTag');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const BITRISE_TOKEN = process.env.BITRISE_TOKEN;

const baseApiUrl = 'https://api.bitrise.io';

const getJobs = async () => {
  const response = await _axios2.default.get(`${baseApiUrl}/v0.1/apps`, {
    headers: { Authorization: `token ${BITRISE_TOKEN}` }
  });
  return response.data.data;
};

const getBuilds = async jobSlug => {
  const response = await _axios2.default.get(`${baseApiUrl}/v0.1/apps/${jobSlug}/builds`, { headers: { Authorization: `token ${BITRISE_TOKEN}` } });
  return response.data.data;
};

const findBitriseBuildTestEvidence = exports.findBitriseBuildTestEvidence = async jobName => {
  const commitHash = await (0, _getCommitHashOfTag.getCommitHashOfTag)();
  const jobs = await getJobs();
  let jobSlug;
  for (const job of jobs) {
    if (job.title === jobName) {
      jobSlug = job.slug;
    }
  }

  if (!jobSlug) {
    throw new Error(`${jobName} job not found. Please check your release-documentation-cli config file`);
  }

  const builds = await getBuilds(jobSlug);
  const correctBuild = builds.find(build => commitHash === build.commit_hash);

  if (correctBuild) {
    const url = `https://www.bitrise.io/build/${correctBuild.slug}`;
    return { jobName, status: correctBuild.status_text, url };
  } else {
    throw new Error(`No build found with commit hash: ${commitHash}`);
  }
};