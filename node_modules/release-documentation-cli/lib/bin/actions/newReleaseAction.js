'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _inquirer = require('inquirer');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _gitInteractions = require('../github/gitInteractions');

var _ChangeLog = require('../utils/ChangeLog');

var _ChangeLog2 = _interopRequireDefault(_ChangeLog);

var _getTestEvidence = require('../utils/getTestEvidence');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = async (userDetails, repoDetails, { approved, scheduled, skipReleaseNotes }) => {
  try {
    console.log('Remember to tag your commit with the release version first ðŸ”–');

    const approvedResponse = await askApprovalIfWeDoNotHaveIt(approved);
    const scheduledResponse = await askWhenToSchedule(scheduled);
    const additionalReleaseNotesResponse = await getAdditionalReleaseNotes(skipReleaseNotes);
    const testEvidenceResponse = await (0, _getTestEvidence.getTestEvidence)();
    const releaseDetails = Object.assign({}, approvedResponse, scheduledResponse, testEvidenceResponse, additionalReleaseNotesResponse);

    await new _ChangeLog2.default('./CHANGELOG.md').create();

    await (0, _gitInteractions.newRelease)(userDetails, repoDetails, releaseDetails);
    console.log('A new release has been publised! ðŸŽ‰ \n' + `Go to https://github.com/${repoDetails}/releases to see the details`);
  } catch (err) {
    console.error('Failed to create a new release: ', err);
    process.exitCode = 1;
  }
};

const askApprovalIfWeDoNotHaveIt = async approved => {
  if (approved) return { approved };

  return await (0, _inquirer.prompt)({
    type: 'confirm',
    name: 'approved',
    message: 'Has this release been approved?'
  });
};

const askWhenToSchedule = async scheduled => {
  if (scheduled) return { scheduled: (0, _moment2.default)().format('MMMM Do YYYY') };

  return await (0, _inquirer.prompt)({
    type: 'input',
    name: 'scheduled',
    message: 'What is the scheduled release time?'
  });
};

const getAdditionalReleaseNotes = async skipReleaseNotes => {
  if (skipReleaseNotes) return { additionalReleaseNotes: '' };

  return await (0, _inquirer.prompt)({
    type: 'input',
    name: 'additionalReleaseNotes',
    message: 'Enter any additional information about this release:'
  });
};