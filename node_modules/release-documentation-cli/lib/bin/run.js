#!/usr/bin/env node
'use strict';

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _latestReleaseAction = require('./actions/latestReleaseAction');

var _latestReleaseAction2 = _interopRequireDefault(_latestReleaseAction);

var _newReleaseAction = require('./actions/newReleaseAction');

var _newReleaseAction2 = _interopRequireDefault(_newReleaseAction);

var _updateReleaseAction = require('./actions/updateReleaseAction');

var _updateReleaseAction2 = _interopRequireDefault(_updateReleaseAction);

var _bumpVersionAction = require('./actions/bumpVersionAction');

var _bumpVersionAction2 = _interopRequireDefault(_bumpVersionAction);

var _changelogAction = require('./actions/changelogAction');

var _changelogAction2 = _interopRequireDefault(_changelogAction);

var _Config = require('./utils/Config');

var _Config2 = _interopRequireDefault(_Config);

var _GitConfig = require('./utils/GitConfig');

var _GitConfig2 = _interopRequireDefault(_GitConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const config = new _Config2.default();
const gitConfig = new _GitConfig2.default(config.gitConfigPath);

const validateUserDetails = userDetails => {
  if (!userDetails.username) throw new Error('Please set the variable GIT_USERNAME in your terminal. e.g export GIT_USERNAME=username');
  if (!userDetails.accessToken) throw new Error('Please set the variable GIT_ACCESS_TOKEN in your terminal. e.g export GIT_ACCESS_TOKEN=accessToken');
  return userDetails;
};

const getUserDetails = () => validateUserDetails({
  username: process.env.GIT_USERNAME,
  accessToken: process.env.GIT_ACCESS_TOKEN
});

_commander2.default.version('1.3.0').command('latest').action(async () => {
  await (0, _latestReleaseAction2.default)(getUserDetails(), gitConfig.repoDetails);
});

_commander2.default.command('new').option('-a, --approved', 'automatically approved this release').option('-s, --scheduled', 'automatically schedule this release').option('-r, --skipReleaseNotes', 'skip additional release notes').action(async options => await (0, _newReleaseAction2.default)(getUserDetails(), gitConfig.repoDetails, {
  approved: options.approved,
  scheduled: options.scheduled,
  skipReleaseNotes: options.skipReleaseNotes
}));

_commander2.default.command('update').option('-v, --versionTag [version]', 'specify the version in your git tag').option('-r, --release', 'update to be latest release').action(async options => {
  const version = options.versionTag ? options.versionTag : undefined;
  const release = options.release ? options.release : false;

  await (0, _updateReleaseAction2.default)(getUserDetails(), gitConfig.repoDetails, version, release);
});

_commander2.default.command('bump-version').action(async () => await (0, _bumpVersionAction2.default)());

_commander2.default.command('changelog').option('-v, --versionTagRange <olderTag>..<newerTag>', 'specify the two version tags to create a range from, older tag first').action(async options => await (0, _changelogAction2.default)(options.versionTagRange));

_commander2.default.parse(process.argv);