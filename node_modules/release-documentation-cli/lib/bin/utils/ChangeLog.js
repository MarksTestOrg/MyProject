'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _generateChangelog = require('generate-changelog');

var _generateChangelog2 = _interopRequireDefault(_generateChangelog);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _gitTags = require('git-tags');

var _gitTags2 = _interopRequireDefault(_gitTags);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ChangeLog {
  constructor(path) {
    this._path = path;
  }

  get path() {
    return this._path;
  }

  async create(versionTagRange) {
    const contents = await _generateChangelog2.default.generate({
      tag: versionTagRange || (await getVersionRange())
    });

    const processedChangeLog = changeLogTitle + `(${formattedDate()})\n` + removeVersionNumberFromChangeLog(contents);

    _fs2.default.writeFileSync(this.path, processedChangeLog);
  }
}

exports.default = ChangeLog;
const getVersionRange = () => new Promise((resolve, reject) => _gitTags2.default.get((err, tags) => {
  if (tags && tags.length > 0) {
    const versionRange = tags[1] ? `${tags[1]}..${tags[0]}` : tags[0];
    resolve(versionRange);
  } else {
    reject(new Error('Failed to read the projects tags'));
  }
}));

const removeVersionNumberFromChangeLog = changeLog => changeLog.substring(changeLog.indexOf('\n') + 1);

const changeLogTitle = '### Change Log ';

const formattedDate = () => (0, _moment2.default)().format('MMMM Do YYYY');