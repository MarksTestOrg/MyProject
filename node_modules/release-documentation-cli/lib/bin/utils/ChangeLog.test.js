'use strict';

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _sinonChai = require('sinon-chai');

var _sinonChai2 = _interopRequireDefault(_sinonChai);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _generateChangelog = require('generate-changelog');

var _generateChangelog2 = _interopRequireDefault(_generateChangelog);

var _gitTags = require('git-tags');

var _gitTags2 = _interopRequireDefault(_gitTags);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _ChangeLog = require('./ChangeLog');

var _ChangeLog2 = _interopRequireDefault(_ChangeLog);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_chai2.default.use(_sinonChai2.default);

describe('ChangeLog', () => {
  var sandbox;

  beforeEach(() => {
    sandbox = _sinon2.default.sandbox.create();
    sandbox.stub(console, 'error');
  });

  afterEach(() => sandbox.restore());

  it('should write the change log contents to "./CHANGELOG.md" based on a single tag', async () => {
    // Setup.
    const expectedDate = 'May 15th 2018';
    const expectedTag = '1.0.0';
    const expectedChanges = 'Chores\n - bumping version number';
    sandbox.stub(_gitTags2.default, 'get').callsArgWith(0, null, [expectedTag]);
    const changeLogStub = sandbox.stub(_generateChangelog2.default, 'generate').resolves('### TitleToRemoved\n' + expectedChanges);
    const fsStub = sandbox.stub(_fs2.default, 'writeFileSync');
    sandbox.stub(_moment2.default.prototype, 'format').returns(expectedDate);

    // Exercise.
    await new _ChangeLog2.default('./CHANGELOG.md').create();

    // Verify.
    changeLogStub.should.have.been.calledWith({ tag: expectedTag });
    fsStub.should.have.been.calledWith('./CHANGELOG.md', `### Change Log (May 15th 2018)\n${expectedChanges}`);
  });

  it('should write the change log contents to "./CHANGELOG.md" based on current tag to previous tag', async () => {
    // Setup.
    const expectedDate = 'May 15th 2018';
    const expectedTagRange = ['1.0.0', '1.1.0'];
    const expectedChanges = 'Chores\n - bumping version number';
    sandbox.stub(_gitTags2.default, 'get').callsArgWith(0, null, expectedTagRange);
    const changeLogStub = sandbox.stub(_generateChangelog2.default, 'generate').resolves('### TitleToRemoved\n' + expectedChanges);
    const fsStub = sandbox.stub(_fs2.default, 'writeFileSync');
    sandbox.stub(_moment2.default.prototype, 'format').returns(expectedDate);

    // Exercise.
    await new _ChangeLog2.default('./CHANGELOG.md').create();

    // Verify.
    changeLogStub.should.have.been.calledWith({ tag: '1.1.0..1.0.0' });
    fsStub.should.have.been.calledWith('./CHANGELOG.md', `### Change Log (May 15th 2018)\n${expectedChanges}`);
  });

  it('should write the change log contents to "./CHANGELOG.md" based on the tag range provided', async () => {
    // Setup.
    const expectedDate = 'May 15th 2018';
    const expectedTagRange = '1.0.0..1.2.0';
    const expectedChanges = 'Chores\n - bumping version number\n - bumping version number';
    const changeLogStub = sandbox.stub(_generateChangelog2.default, 'generate').resolves('### TitleToRemoved\n' + expectedChanges);
    const fsStub = sandbox.stub(_fs2.default, 'writeFileSync');
    sandbox.stub(_moment2.default.prototype, 'format').returns(expectedDate);

    // Exercise.
    await new _ChangeLog2.default('./CHANGELOG.md').create(expectedTagRange);

    // Verify.
    changeLogStub.should.have.been.calledWith({ tag: expectedTagRange });
    fsStub.should.have.been.calledWith('./CHANGELOG.md', `### Change Log (May 15th 2018)\n${expectedChanges}`);
  });

  it('should throw an error if there are no tagged versions', async () => {
    // Setup.
    sandbox.stub(_gitTags2.default, 'get').callsArgWith(0, null, null);

    // Exercise.
    let expectedError = undefined;
    try {
      await new _ChangeLog2.default('./CHANGELOG.md').create();
    } catch (err) {
      expectedError = err;
    }

    // Verify.
    expectedError.should.be.an('Error');
  });

  it('should throw an error when it fails to generate a changelog', async () => {
    // Setup.
    const expectedTagRange = ['1.0.0', '1.1.0'];
    sandbox.stub(_gitTags2.default, 'get').callsArgWith(0, null, expectedTagRange);
    sandbox.stub(_generateChangelog2.default, 'generate').throws(new Error('expected error'));

    // Exercise.
    let expectedError = undefined;
    try {
      await new _ChangeLog2.default('./CHANGELOG.md').create();
    } catch (err) {
      expectedError = err;
    }

    // Verify.
    expectedError.should.be.an('Error');
  });
});